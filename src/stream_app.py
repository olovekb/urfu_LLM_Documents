import os


import json
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

import streamlit as st

from src.services.document_checker import DocumentChecker
from src.main import process_document  # –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ UI
import pandas as pd  # type: ignore

# --------------------------------------------------------------------------------------
# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
# --------------------------------------------------------------------------------------


@st.cache_resource(show_spinner="‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –∏ —Å—Ç—Ä–æ—é –∏–Ω–¥–µ–∫—Å...")
def get_document_checker(
    csv_path: str, cache_dir: str, force_rebuild: bool
) -> DocumentChecker:  # noqa: D401
    """–ü–æ–ª—É—á–∏—Ç—å –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä ``DocumentChecker``.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ``st.cache_resource`` –¥–ª—è —Ç—è–∂—ë–ª—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: –º–æ–¥–µ–ª—å
    SentenceTransformer –∏ –∏–Ω–¥–µ–∫—Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞.

    Parameters
    ----------
    csv_path : str
        –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º.
    cache_dir : str
        –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.
    force_rebuild : bool
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫—ç—à–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.

    Returns
    -------
    DocumentChecker
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    """
    checker = DocumentChecker(cache_dir=cache_dir)
    checker.load_reference_data(csv_path, force_rebuild=force_rebuild)
    return checker


@st.cache_data(show_spinner=False)
def save_uploaded_file(uploaded_file) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ Streamlit —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.

    Returns
    -------
    str
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É PDF.
    """
    suffix = Path(uploaded_file.name).suffix or ".pdf"
    with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
        return tmp_file.name


# --------------------------------------------------------------------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# --------------------------------------------------------------------------------------


def main() -> None:  # noqa: D401
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""

    st.set_page_config(page_title="Document Inspector", page_icon="üìÑ", layout="wide")
    st.title("üìÑ Document Inspector")
    st.write(
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SentenceTransformer."
    )

    # ----------------------------
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ expander)
    # ----------------------------
    st.sidebar.header("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    with st.sidebar.expander("üìÅ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏ –∫—ç—à", expanded=True):
        # –ü—É—Ç—å –∫ CSV —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º
        default_csv_path = os.path.join(
            Path(__file__).resolve().parent.parent, "data", "merged.csv"
        )
        csv_path = st.text_input(
            "CSV-—Ñ–∞–π–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞", value=default_csv_path, key="csv_path"
        )

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞
        default_cache_dir = os.path.join(
            Path(__file__).resolve().parent.parent, "embeddings_cache"
        )
        cache_dir = st.text_input(
            "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", value=default_cache_dir, key="cache_dir"
        )

        # –§–ª–∞–≥ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
        force_rebuild = st.checkbox(
            "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∫—ç—à —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", key="force_rebuild"
        )

    with st.sidebar.expander("üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫ PDF", expanded=True):
        pdf_source = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫", ("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞ –¥–∏—Å–∫–µ"), key="pdf_source"
        )

        uploaded_files: List[Any] = []  # ¬´Any¬ª –∏–∑-–∑–∞ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ UploadedFile
        pdf_dir: str = ""
        if pdf_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã":
            uploaded_files = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ PDF", type=["pdf"], accept_multiple_files=True, key="uploader"
            )
        else:
            pdf_dir = st.text_input(
                "–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å PDF",
                value=os.path.join(Path(__file__).resolve().parent.parent, "pdf_documents"),
                key="pdf_dir",
            )

    run_btn = st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", use_container_width=True)

    # ----------------------------
    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # ----------------------------
    if run_btn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSV
        if not os.path.isfile(csv_path):
            st.sidebar.error("üìÑ CSV-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
            st.stop()

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ PDF
        pdf_paths: List[str] = []
        temp_files: List[str] = []  # –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏

        if pdf_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã":
            if not uploaded_files:
                st.sidebar.error("–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
                st.stop()
            for uf in uploaded_files:
                tmp_path = save_uploaded_file(uf)
                temp_files.append(tmp_path)
                pdf_paths.append(tmp_path)
        else:
            if not os.path.isdir(pdf_dir):
                st.sidebar.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å PDF –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                st.stop()
            pdf_paths = [
                os.path.join(pdf_dir, f)
                for f in os.listdir(pdf_dir)
                if f.lower().endswith(".pdf")
            ]
            if not pdf_paths:
                st.sidebar.error("–í –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç PDF-—Ñ–∞–π–ª–æ–≤.")
                st.stop()

        # –ü–æ–ª—É—á–∞–µ–º DocumentChecker –∏–∑ –∫—ç—à–∞/—Å–æ–∑–¥–∞—ë–º
        checker = get_document_checker(csv_path, cache_dir, force_rebuild)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        results: List[Dict[str, Any]] = []
        progress_bar = st.progress(0, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤‚Ä¶")

        for idx, pdf_path in enumerate(pdf_paths, start=1):
            progress_bar.progress(
                float(idx) / len(pdf_paths), text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {idx}/{len(pdf_paths)}‚Ä¶"
            )
            result = process_document(checker, pdf_path, idx, len(pdf_paths))
            results.append(result)

        progress_bar.empty()
        st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        # ----------------------------
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # ----------------------------
        if results:
            st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

            # ===== 1. –ú–µ—Ç—Ä–∏–∫–∏ =====
            total_docs = len(results)
            exact_docs = sum(1 for r in results if r.get("exact_match"))
            no_match_docs = sum(
                1 for r in results if not r.get("exact_match") and not r.get("matches")
            )

            col_total, col_exact, col_empty = st.columns(3)
            col_total.metric("–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", total_docs)
            col_exact.metric("–¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", exact_docs)
            col_empty.metric("–ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π", no_match_docs)

            # ===== 2. –û–±–∑–æ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ =====
            overview_data = []
            for r in results:
                similarity = (
                    r["exact_match"].get("similarity") if r.get("exact_match") else "-"
                )
                overview_data.append(
                    {
                        "–§–∞–π–ª": r["filename"],
                        "–¢–æ—á–Ω–æ–µ": bool(r.get("exact_match")),
                        "Similarity": similarity,
                        "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã": len(r.get("matches", [])),
                    }
                )

            overview_df = pd.DataFrame(overview_data)
            st.dataframe(overview_df, use_container_width=True, hide_index=True)

            # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑–∞ JSON
            show_json = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

            # ===== 3. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º =====
            for res in results:
                with st.expander(f"ÔøΩÔøΩ {res['filename']}"):
                    left_col, right_col = st.columns([1, 2])

                    # 3.1 –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äì –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    with left_col:
                        extracted = res.get("extracted_data", {})
                        if extracted:
                            st.write("**–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF:**")
                            st.json(extracted, expanded=False)

                        exact = res.get("exact_match")
                        if exact:
                            st.success(
                                f"–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {exact['similarity']}:\n\n**–ê—Ä—Ö–∏–≤:** {exact['archive']}\n\n**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {exact['organization']}"
                            )
                            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ st.code (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π copy-icon)
                            st.code(
                                f"{exact['archive']} | {exact['organization']}",
                                language="",
                            )
                        else:
                            st.warning("–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

                    # 3.2 –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äì –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                    with right_col:
                        matches = res.get("matches", [])
                        if matches:
                            st.write("**–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:**")
                            st.table(matches)
                        else:
                            st.info("–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

                    # 3.3 (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å—ã—Ä–æ–π JSON
                    if show_json:
                        st.divider()
                        st.json(res, expanded=False)
        else:
            st.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for f in temp_files:
            try:
                os.remove(f)
            except FileNotFoundError:
                pass


if __name__ == "__main__":
    main()
