"""Модуль для нормализации текста."""

import re


class TextNormalizer:
    """Класс для нормализации текста."""

    @staticmethod
    def normalize(text: str) -> str:
        """Нормализует текст для сравнения.

        Args:
            text: Исходный текст

        Returns:
            Нормализованный текст
        """
        if not isinstance(text, str):
            return ""

        # Приводим к нижнему регистру
        text = text.lower()

        # Удаляем специальные символы, но сохраняем точки и запятые
        text = re.sub(r"[^\w\s.,]", " ", text)

        # Заменяем множественные пробелы на один
        text = re.sub(r"\s+", " ", text)

        # Удаляем пробелы в начале и конце и применяем Title Case
        return TextNormalizer.to_title_case(text)

    @staticmethod
    def normalize_organization(text: str) -> str:
        """Нормализует название организации (удаляет цифры и специальные символы кроме точек и запятых).

        Args:
            text: Исходный текст

        Returns:
            Нормализованное название организации
        """
        if not isinstance(text, str):
            return ""

        # Удаляем цифры
        text = re.sub(r"\d+", "", text)

        # Убираем распространённые служебные слова, даты и обозначения,
        # которые часто появляются в PDF, но не относятся к названию организации.
        junk_words = [
            "года",
            "фонд",
            "опись",
        ]

        # Месяцы (склонения родительного падежа)
        months = [
            "января",
            "февраля",
            "марта",
            "апреля",
            "мая",
            "июня",
            "июля",
            "августа",
            "сентября",
            "октября",
            "ноября",
            "декабря",
        ]

        junk_words.extend(months)

        # Удаляем каждое junk слово как отдельное слово
        pattern = r"\b(" + "|".join(junk_words) + r")\b"
        text = re.sub(pattern, " ", text)

        # Удаляем специальные символы, но сохраняем точки и запятые
        text = re.sub(r"[^\w\s.,]", " ", text)

        # Заменяем множественные пробелы на один
        text = re.sub(r"\s+", " ", text)

        # Приводим к Title Case для дальнейших эмбеддингов
        return TextNormalizer.to_title_case(text)

    # ---------------------------------------------------------------------
    # Вспомогательный метод: красивый «Title Case» для русского текста
    # ---------------------------------------------------------------------
    @staticmethod
    def to_title_case(text: str) -> str:
        """Преобразует строку так, чтобы каждое слово начиналось с заглавной буквы.

        Args:
            text: Исходный текст

        Returns:
            Текст, где каждое слово начинается с заглавной буквы (unicode-aware).
        """
        if not isinstance(text, str):
            return ""

        # Используем встроенный метод .title(), который умеет работать с Unicode.
        # Дополнительно приводим множественные пробелы к одному и очищаем края.
        return re.sub(r"\s+", " ", text.strip()).title()
